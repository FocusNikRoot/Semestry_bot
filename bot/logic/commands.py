import requests, datetime, deepl
from bs4 import BeautifulSoup
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from bot.logic.log import log_message
from config.settings import deepl_token, kinopoisk_unofficial_token, kinopoisk_dev_token, weather_token

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–ü—Ä–∏–≤–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
          "–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ:\n" \
          "  /weather <–≥–æ—Ä–æ–¥> ‚Äî –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n" \
          "  /map <–ª–æ–∫–∞—Ü–∏—è> ‚Äî –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–æ–∫–∞—Ü–∏–∏ + –∫–∞—Ä—Ç–∞\n" \
          "  /translate <—Ç–µ–∫—Å—Ç> ‚Äî –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π\n" \
          "  /affirmation ‚Äî –°–ª—É—á–∞–π–Ω–∞—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è\n" \
          "–û—Å–Ω–æ–≤–Ω—ã–µ:\n" \
          "  /movie <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ñ–∏–ª—å–º–µ\n" \
          "  /most_wanted ‚Äî –û–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∏–ª—å–º—ã –º–µ—Å—è—Ü–∞"
    await update.message.reply_text(msg, reply_markup=get_main_keyboard())
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")
    
async def translate(text, target_lang='ru'):
    deepl_client = deepl.DeepLClient(deepl_token)
    try:
        result = deepl_client.translate_text(text, target_lang=target_lang)
    except Exception:
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º..."
    return result if result else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç."

async def get_posters(film_id):
    return f"https://kinopoiskapiunofficial.tech/images/posters/kp/{film_id}.jpg"

async def get_details(film_id):
    url = f"https://api.kinopoisk.dev/v1.4/movie/{film_id}"
    headers = {
        'X-API-KEY': kinopoisk_dev_token,
        'Content-Type': 'application/json'
    }
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            return data.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
        else:
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ñ–∏–ª—å–º–µ."
    except Exception:
        return "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."

async def get_actual_month():
    month = datetime.datetime.now().month
    dict_month = {
        1: "JANUARY",
        2: "FEBRUARY",
        3: "MARCH",
        4: "APRIL",
        5: "MAY",
        6: "JUNE",
        7: "JULY",
        8: "AUGUST",
        9: "SEPTEMBER",
        10: "OCTOBER",
        11: "NOVEMBER",
        12: "DECEMBER"       
    }
    return dict_month.get(month)
    
async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        msg = "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather <–≥–æ—Ä–æ–¥>"
        await update.message.reply_text(msg)
        await log_message(update, f"User: {update.message.text}\nBot: {msg}")
        return
    city = ' '.join(context.args)
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_token}&lang=ru&units=metric"
    try:
        resp = requests.get(url)
        if resp.status_code == 200:
            data = resp.json()
            msg = f"–ü–æ–≥–æ–¥–∞ –≤ {city}:\n" \
                  f"{data['weather'][0]['description'].capitalize()}\nüå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *{data['main']['temp']}¬∞C*\n" \
                  f"üå° –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ *{data['main']['feels_like']}¬∞C*\n\n" \
                  f"üí¶ –í–ª–∞–∂–Ω–æ—Å—Ç—å: *{data['main']['humidity']}%*\nüå´ –î–∞–≤–ª–µ–Ω–∏–µ: *{data['main']['pressure']} –≥–ü–∞*\n\n" \
                  f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: *{data['wind']['speed']} –º/—Å*\n‚ÜóÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{data['wind']['deg']}¬∞*"
            icon_id = data['weather'][0]['icon']
            icon_url = f"http://openweathermap.org/img/wn/{icon_id}@2x.png"
            await update.message.reply_photo(photo=icon_url, caption=msg, parse_mode="Markdown")
        else:
            msg = "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            error_picture = "./assets/img/cat-404-error.jpg"
            await update.message.reply_photo(photo=error_picture, caption=msg)
    except Exception:
        msg = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."
        await update.message.reply_text(msg)
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")

async def movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        msg = "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: /movie <–Ω–∞–∑–≤–∞–Ω–∏–µ>"
        await update.message.reply_text(msg)
        await log_message(update, f"User: {update.message.text}\nBot: {msg}")
        return
    movie = ' '.join(context.args)
    search_url = f"https://www.kinopoisk.ru/index.php?kp_query={movie}"
    try:
        resp = requests.get(search_url, headers={'User-Agent': 'Mozilla/5.0'})
        soup = BeautifulSoup(resp.text, 'html.parser')
        film_content = soup.select_one('.search_results .element')
        if film_content:
            title = film_content.select_one('.info .name a').text.strip()
            rating = film_content.select_one('.rating')
            year = film_content.select_one('.info .name .year').text.strip()
            full_name = film_content.select_one('.info .gray').text.strip()
            rating_text = rating.text.strip() if rating else "–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞"
            film_id = film_content.select_one('.info .name a')['href'].split('/')[2]
            poster = await get_posters(film_id)
            
            msg = f"{title} ({year})\n{full_name}.\n\n" \
                  f"*–†–µ–π—Ç–∏–Ω–≥: {rating_text}/10*‚≠êÔ∏è\n\n" \
                  f"–û–ø–∏—Å–∞–Ω–∏–µ:\n{await get_details(film_id)}\n\n" \
                  f"[–°—Å—ã–ª–æ—á–∫–∞ *–¢—ã–∫*](https://www.kinopoisk.ru{film_content.select_one('.info .name a')['href']})"
            if poster:
                await update.message.reply_photo(photo=poster, caption=msg, parse_mode="Markdown")
            else:
                await update.message.reply_text(msg, parse_mode="Markdown")
        else:
            msg = "–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω."
            error_picture = "./assets/img/cat-404-error.jpg"
            await update.message.reply_photo(photo=error_picture, caption=msg)
    except Exception:
        msg = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."
        await update.message.reply_text(msg)
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")
    
async def most_wanted(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page = 0
    await send_most_wanted(update, context, page, edit=False)

async def most_wanted_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        page = int(query.data.split("_")[-1])
    except Exception:
        await query.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    await send_most_wanted(update, context, page, edit=True)

async def send_most_wanted(update, context, page, edit):
    year = datetime.datetime.now().year
    month = await get_actual_month()
    url = f"https://kinopoiskapiunofficial.tech/api/v2.2/films/premieres?year={year}&month={month}"
    try:
        resp = requests.get(url, headers={
                'X-API-KEY': kinopoisk_unofficial_token,
                'Content-Type': 'application/json'
            })
        if resp.status_code == 200:
            data = resp.json()
            items = data['items']
            per_page = 10
            total_pages = (len(items) + per_page - 1) // per_page
            start = page * per_page
            end = start + per_page
            msg = f"–§–∏–ª—å–º—ã –º–µ—Å—è—Ü–∞ (—Å—Ç—Ä. {page+1}/{total_pages}):\n\n"
            for item in items[start:end]:
                msg += (
                    f"üé¨ [{item['nameRu']}](https://www.kinopoisk.ru/film/{item['kinopoiskId']}/) "
                    f"({item['year']}) {item.get('duration', '?')} –º–∏–Ω.\n"
                    f"üìÜ –î–∞—Ç–∞ –ø—Ä–µ–º—å–µ—Ä—ã: {item.get('premiereRu', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    f"[–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç üéü](https://www.kinopoisk.ru/film/{item['kinopoiskId']}/afisha/city/1/)\n\n"
                )
            keyboard = get_most_wanted_keyboard(page, total_pages)
            if edit:
                await update.callback_query.edit_message_text(msg, reply_markup=keyboard, parse_mode="Markdown")
            else:
                await update.message.reply_text(msg, reply_markup=keyboard, parse_mode="Markdown")
            await log_message(update, f"User: {getattr(update.message, 'text', '')}\nBot: {msg}")
        else:
            msg = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
            if edit:
                await update.callback_query.edit_message_text(msg)
            else:
                await update.message.reply_text(msg)
    except Exception:
        msg = "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º..."
        if edit:
            await update.callback_query.edit_message_text(msg)
        else:
            await update.message.reply_text(msg)

def get_most_wanted_keyboard(page, total_pages):
    buttons = []
    if page > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"most_wanted_{page-1}"))
    if page < total_pages - 1:
        buttons.append(InlineKeyboardButton("–î–∞–ª–µ–µ ‚û°Ô∏è", callback_data=f"most_wanted_{page+1}"))
    return InlineKeyboardMarkup([buttons]) if buttons else None

async def map_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        msg = "–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –∞–¥—Ä–µ—Å –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è: /map <–ª–æ–∫–∞—Ü–∏—è>"
        await update.message.reply_text(msg)
        await log_message(update, f"User: {update.message.text}\nBot: {msg}")
        return
    city = ' '.join(context.args)
    url = f"https://nominatim.openstreetmap.org/search?format=json&q={city}"
    resp = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'})
    data = resp.json()
    if data:
        lat = data[0]['lat']
        lon = data[0]['lon']
        msg = f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {city}: {lat}, {lon}"
        await update.message.reply_text(msg)
        await update.message.reply_location(latitude=float(lat), longitude=float(lon))
    else:
        msg = "–ù–µ –Ω–∞—à–ª–æ—Å—å :—Å."
        error_picture = "./assets/img/cat-404-error.jpg"
        await update.message.reply_photo(photo=error_picture, caption=msg)
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")

async def translate_user_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        msg = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞."
        await update.message.reply_text(msg)
        await log_message(update, f"User: {update.message.text}\nBot: {msg}")
        return
    text = ' '.join(context.args)
    translated_text = await translate(text)
    msg = f"–ò—Å—Ç–æ—á–Ω–∏–∫:\n{text}\n\n" \
          f"–ü–µ—Ä–µ–≤–æ–¥:\n{translated_text}"
    await update.message.reply_text(msg)
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")

async def random_affirmations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://www.affirmations.dev/"
    resp = requests.get(url)
    if resp.status_code == 200:
        affirmation = resp.json().get('affirmation')
        ru_affirmation = await translate(affirmation)
        msg = f"{affirmation}\n\n-=-=-=-=-–ù–∞ —Ä—É—Å—Å–∫–æ–º-=-=-=-=-\n\n{ru_affirmation}"
    else:
        affirmation = "–ú—ã –æ—à–∏–±–∞–µ–º—Å—è - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –ö–∞–∂–¥–∞—è –æ—à–∏–±–∫–∞ - —ç—Ç–æ —Ü–µ–Ω–Ω—ã–π –æ–ø—ã—Ç."
        msg = f"{affirmation}"

    
    await update.message.reply_text(msg)
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")
    
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
    await update.message.reply_text(msg)
    await log_message(update, f"User: {update.message.text}\nBot: {msg}")

def get_main_keyboard():
    keyboard = [
        ["/affirmation", "/most_wanted"],
        [           "/help"             ]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)